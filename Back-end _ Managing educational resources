const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/medical_resources_db', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Error connecting to MongoDB:', err);
});

// Resource Model
const Resource = mongoose.model('Resource', {
    title: String,
    description: String,
    type: String, // e.g., article, research paper, recent advancement
    url: String,
    uploadedBy: String,
    uploadedAt: { type: Date, default: Date.now }
});

// Route to add a new resource
app.post('/api/resources', async (req, res) => {
    try {
        const { title, description, type, url, uploadedBy } = req.body;
        const resource = await Resource.create({ title, description, type, url, uploadedBy });
        res.status(201).json(resource);
    } catch (err) {
        console.error('Error adding resource:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Route to get all resources
app.get('/api/resources', async (req, res) => {
    try {
        const resources = await Resource.find();
        res.json(resources);
    } catch (err) {
        console.error('Error fetching resources:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Route to get resources by type
app.get('/api/resources/:type', async (req, res) => {
    try {
        const type = req.params.type;
        const resources = await Resource.find({ type });
        res.json(resources);
    } catch (err) {
        console.error('Error fetching resources:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(Server running on port ${PORT});
});
