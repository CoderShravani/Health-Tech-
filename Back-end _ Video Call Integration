const express = require('express');
const mongoose = require('mongoose');
const multer = require('multer');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/doctor_db', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Error connecting to MongoDB:', err);
});

// Message Model
const Message = mongoose.model('Message', {
    sender: String,
    receiver: String,
    content: String,
    timestamp: { type: Date, default: Date.now }
});

// File Upload Configuration
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, 'uploads/');
    },
    filename: (req, file, cb) => {
        cb(null, Date.now() + '-' + file.originalname);
    }
});
const upload = multer({ storage });

// Route to send a message
app.post('/api/messages', async (req, res) => {
    try {
        const { sender, receiver, content } = req.body;
        const message = await Message.create({ sender, receiver, content });
        res.status(201).json(message);
    } catch (err) {
        console.error('Error sending message:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Route to upload a file
app.post('/api/upload', upload.single('file'), async (req, res) => {
    try {
        const file = req.file;
        // Handle file storage in the database or file system
        res.status(201).json({ message: 'File uploaded successfully', file });
    } catch (err) {
        console.error('Error uploading file:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(Server running on port ${PORT});
});
