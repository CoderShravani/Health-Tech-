const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/doctor_db', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Error connecting to MongoDB:', err);
});

// Appointment Model
const Appointment = mongoose.model('Appointment', {
    patientName: String,
    doctorName: String,
    date: Date
});

// Route to book appointments
app.post('/api/appointments', async (req, res) => {
    try {
        const { patientName, doctorName, date } = req.body;
        const appointment = await Appointment.create({ patientName, doctorName, date });
        res.status(201).json(appointment);
    } catch (err) {
        console.error('Error booking appointment:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Route to get appointments for a specific doctor
app.get('/api/appointments/:doctorName', async (req, res) => {
    try {
        const doctorName = req.params.doctorName;
        const appointments = await Appointment.find({ doctorName });
        res.json(appointments);
    } catch (err) {
        console.error('Error fetching appointments:', err);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the server
app.listen(PORT, () => {
    console.log(Server running on port ${PORT});
});
